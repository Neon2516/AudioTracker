# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AudioTracker.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtCore import QTimer

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(449, 469)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.button_previous = QtWidgets.QPushButton(self.centralwidget)
        self.button_previous.setGeometry(QtCore.QRect(10, 40, 32, 32))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.button_previous.setFont(font)
        self.button_previous.setObjectName("button_previous")
        self.button_play = QtWidgets.QPushButton(self.centralwidget)
        self.button_play.setGeometry(QtCore.QRect(40, 40, 32, 32))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.button_play.setFont(font)
        self.button_play.setObjectName("button_play")
        self.button_stop = QtWidgets.QPushButton(self.centralwidget)
        self.button_stop.setGeometry(QtCore.QRect(70, 40, 32, 32))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.button_stop.setFont(font)
        self.button_stop.setObjectName("button_stop")
        self.button_interrupt = QtWidgets.QPushButton(self.centralwidget)
        self.button_interrupt.setGeometry(QtCore.QRect(100, 40, 32, 32))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.button_interrupt.setFont(font)
        self.button_interrupt.setObjectName("button_interrupt")
        self.button_next = QtWidgets.QPushButton(self.centralwidget)
        self.button_next.setGeometry(QtCore.QRect(130, 40, 32, 32))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.button_next.setFont(font)
        self.button_next.setObjectName("button_next")
        self.textbox_trackNow = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_trackNow.setGeometry(QtCore.QRect(170, 10, 271, 31))
        self.textbox_trackNow.setReadOnly(True)
        self.textbox_trackNow.setObjectName("textbox_trackNow")
        self.list_tracks = QtWidgets.QListWidget(self.centralwidget)
        self.list_tracks.setGeometry(QtCore.QRect(10, 80, 431, 381))
        self.list_tracks.setObjectName("list_tracks")
        self.trackVolume = QtWidgets.QSlider(self.centralwidget)
        self.trackVolume.setGeometry(QtCore.QRect(220, 50, 160, 22))
        self.trackVolume.setMaximum(100)
        self.trackVolume.setSingleStep(1)
        self.trackVolume.setPageStep(10)
        self.trackVolume.setOrientation(QtCore.Qt.Horizontal)
        self.trackVolume.setObjectName("trackVolume")
        self.volumeVal = QtWidgets.QLabel(self.centralwidget)
        self.volumeVal.setGeometry(QtCore.QRect(390, 50, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.volumeVal.setFont(font)
        self.volumeVal.setObjectName("volumeVal")
        self.subsequence = QtWidgets.QPushButton(self.centralwidget)
        self.subsequence.setGeometry(QtCore.QRect(170, 42, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.subsequence.setFont(font)
        self.subsequence.setObjectName("subsequence")
        self.timeTrack = QtWidgets.QLabel(self.centralwidget)
        self.timeTrack.setGeometry(QtCore.QRect(10, 10, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.timeTrack.setFont(font)
        self.timeTrack.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.timeTrack.setAlignment(QtCore.Qt.AlignCenter)
        self.timeTrack.setObjectName("timeTrack")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.button_play.setEnabled(False)
        self.button_stop.setEnabled(False)
        self.button_interrupt.setEnabled(False)

        self.trackVolume.setValue(50)
        from os import listdir
        from os.path import isfile, join
        onlyfiles = [f  for f in listdir("Audio") if isfile(join("Audio", f))]
        from mutagen.mp3 import MP3
        import datetime
        onlyfiles = [str(i + 1) + '. ' + str(datetime.timedelta(seconds=MP3('Audio/' + onlyfiles[i]).info.length))[2:7] + ' - ' + onlyfiles[i] for i in range(len(onlyfiles))]
        self.list_tracks.addItems(onlyfiles)
        self.timer = QTimer()
        self.timeTrack.setText("00:00")
        self.buttonsAction()



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AudioTracker"))
        self.button_previous.setText(_translate("MainWindow", "‚èÆ"))
        self.button_play.setText(_translate("MainWindow", "‚ñ∂Ô∏è"))
        self.button_stop.setText(_translate("MainWindow", "‚è∏Ô∏è"))
        self.button_interrupt.setText(_translate("MainWindow", "‚óºÔ∏è"))
        self.button_next.setText(_translate("MainWindow", "‚è≠"))
        self.volumeVal.setText(_translate("MainWindow", "50"))
        self.subsequence.setText(_translate("MainWindow", "üîÅ"))
        self.timeTrack.setText(_translate("MainWindow", "00:00"))

    def selectTrack(self, nameTrack):
        self.button_play.setEnabled(True)
        self.button_stop.setEnabled(True)
        self.button_interrupt.setEnabled(True)
        from pygame import mixer
        self.timer.stop()
        j = self.list_tracks.currentItem().text().split()[0][:-1]
        j = int(len(j))
        self.textbox_trackNow.setText(str(nameTrack[9 + j:]))
        self.timeTrack.setText("00:00")
        if (self.textbox_trackNow.text() != ''):
            mixer.init()
            mixer.music.load('Audio/' + self.list_tracks.currentItem().text()[10 + j:])
            mixer.music.play()
            self.timer.start(1000)

    def pauseTrack(self):
        from pygame import mixer
        self.timer.stop()
        mixer.music.pause()

    def unpauseTrack(self):
        from pygame import mixer
        if(mixer.music.get_endevent()):
            mixer.music.play()
            mixer.music.set_endevent(False)
        else:
            mixer.music.unpause()
        self.timer.start(1000)

    def interruptTrack(self):
        from pygame import mixer
        self.timer.stop()
        mixer.music.stop()
        mixer.music.set_endevent(True)

        import datetime
        j = self.list_tracks.currentItem().text().split()[0][:-1]
        j = int(len(j))
        self.textbox_trackNow.setText((str(self.list_tracks.currentItem().text()[9 + j:])))
        self.timeTrack.setText("00:00")

    def nextTrack(self):
        from pygame import mixer
        from random import choice
        self.timer.stop()
        mixer.music.set_endevent(False)
        if self.subsequence.text() == 'üîÄ':
            self.list_tracks.setCurrentRow(choice([i for i in range(self.list_tracks.count()) if i != self.list_tracks.currentRow()]))
        elif (self.list_tracks.currentRow() == self.list_tracks.count() - 1):
            self.list_tracks.setCurrentRow(0)
        else:
            self.list_tracks.setCurrentRow(self.list_tracks.currentRow() + 1)
        self.selectTrack(self.list_tracks.currentItem().text())
        self.timer.start(1000)
    def previousTrack(self):
        from pygame import mixer
        self.timer.stop()
        mixer.music.set_endevent(False)
        if (self.list_tracks.currentRow() == 0):
            self.list_tracks.setCurrentRow(self.list_tracks.count() - 1)
        else:
            self.list_tracks.setCurrentRow(self.list_tracks.currentRow() - 1)
        self.selectTrack(self.list_tracks.currentItem().text())
        self.timer.start(1000)

    def check_value(self):
        from pygame import mixer
        import random
        import datetime
        j = self.list_tracks.currentItem().text().split()[0][:-1]
        j = int(len(j))
        self.textbox_trackNow.setText((str(self.list_tracks.currentItem().text()[9 + j:])))
        self.timeTrack.setText(str(datetime.timedelta(seconds=mixer.music.get_pos()/1000))[2:7])
        if mixer.music.get_pos() == -1:
            match self.subsequence.text():
                case 'üîÅ':
                    self.nextTrack()
                case 'üîÇ':
                    self.selectTrack(self.list_tracks.currentItem().text())
                    '''self.timer.stop()
                    self.timeTrack.setText('00:00')
                    mixer.music.play()
                    self.timer.start(1000)'''
                case 'üîÄ':
                    self.nextTrack()
                    '''self.timer.stop()
                    self.timeTrack.setText('00:00')
                    self.list_tracks.setCurrentRow(random.randrange(0, self.list_tracks.count()))
                    mixer.music.play()
                    self.timer.start(1000)'''


    def change_value(self):
        from pygame import mixer
        self.volumeVal.setText(str(self.trackVolume.value()))
        mixer.music.set_volume(self.trackVolume.value()/100)


    def change_order(self):
        value = self.subsequence.text()
        match value:
            case 'üîÅ':
                self.subsequence.setText('üîÇ')
            case 'üîÇ':
                self.subsequence.setText('üîÄ')
            case 'üîÄ':
                self.subsequence.setText('üîÅ')


    def buttonsAction(self):
        self.list_tracks.clicked.connect(lambda: self.selectTrack(self.list_tracks.currentItem().text()))
        self.button_stop.clicked.connect(self.pauseTrack)
        self.button_play.clicked.connect(self.unpauseTrack)
        self.button_interrupt.clicked.connect(self.interruptTrack)
        self.button_next.clicked.connect(self.nextTrack)
        self.button_previous.clicked.connect(self.previousTrack)
        self.timer.timeout.connect(self.check_value)
        self.trackVolume.valueChanged.connect(self.change_value)
        self.subsequence.clicked.connect(self.change_order)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
